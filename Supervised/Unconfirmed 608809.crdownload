#!/usr/bin/env python
# coding: utf-8

# In[ ]:


You have been given car price data. create a machine learning model to predict the price of the cars. The evaluation will be done on the MSE and r2 score.


# In[22]:


import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics


# In[23]:


data=pd.read_csv('CarPrice.csv')


# In[24]:


data.head()


# In[25]:


data.info()


# In[26]:


data.isnull().sum()


# In[27]:


from sklearn.preprocessing import LabelEncoder

cat_list=[]
for col in data.columns:
    if(data[col].dtype=='object'):
        cat_list.append(col)
        
        
le=LabelEncoder()
for col in cat_list:
    data[col]=le.fit_transform(data[col])


# In[28]:


X=data.iloc[:,:-1]


# In[29]:


X


# In[30]:


y=data.iloc[:,-1]


# In[31]:


y


# In[13]:


from sklearn.preprocessing import StandardScaler
sc=StandardScaler()


# In[14]:


X=sc.fit_transform(X)


# In[32]:


X=pd.DataFrame(X)
y=pd.DataFrame(y)


# In[33]:


X=X.drop('car_ID', axis=1)


# In[34]:


X


# In[35]:


x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)


# In[36]:


lr=LinearRegression()
lr.fit(x_train,y_train)


# In[37]:


lr.intercept_
y_pred=lr.predict(x_test)
score=metrics.r2_score(y_test,y_pred)
score


# In[38]:


print("mean absolute error",metrics.mean_absolute_error(y_test,y_pred))
print("mean squared error",metrics.mean_squared_error(y_test,y_pred))
print("root mean squared error",np.sqrt(metrics.mean_squared_error(y_test,y_pred)))

